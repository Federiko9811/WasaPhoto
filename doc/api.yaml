openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    This is the app for Wasa Project 2022/23
    Federico Raponi 1963339
  version: "1.0"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: integer
  responses:
    UnauthorizedError:
      description: The token is not valid, or the user is not authorized to access the resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: error message
                example: The token is not valid, or the user is not authorized to access the resource
    NotFoundError:
      description: The resource is not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: error message
                example: The resource is not found
    BadRequestError:
      description: The request is not valid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: error message
                example: The request is not valid
    ForbiddenError:
      description: The user is not authorized to access the resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: error message
                example: The user is not authorized to access the resource
    CreatedMessage:
      description: The resource is created
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: success message
                example: The resource is created
    NoContentMessage:
      description: The resource is deleted
  parameters:
    UserId:
      schema:
        type: integer
        example: 1
      name: id
      in: path
      required: true
      description: The unique user identifier
    PhotoId:
      name: photoId
      schema:
        type: integer
        example: 1
      in: path
      required: true
      description: The unique photo identifier
    CommentId:
      name: commentId
      schema:
        type: integer
        example: 1
      in: path
      required: true
      description: The unique comment identifier
    Username:
      schema:
        type: string
        example: Federiko98
      name: username
      in: path
      required: true
      description: Username of the user decided by the user during the registration
  schemas:
    Username:
      type: string
      example: Federiko98
      pattern: 'Ë†.*?$'
      minLength: 3
      maxLength: 16
    User:
      title: User
      description: User object for the app WASAPhoto
      type: object
      properties:
        id:
          type: integer
          example: 1
        name: { $ref: "#/components/schemas/Username" }
    Photo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        owner:
          $ref: "#/components/schemas/User"
        img:
          type: string
          format: binary
        createdAt:
          type: string
          format: date-time
        numberOfLikes:
          type: integer
          example: 200
        numberOfComments:
          type: integer
          example: 20
    Photos:
      title: Photos
      type: array
      items:
        $ref: "#/components/schemas/Photo"
    UserProfilePage:
      title: UserProfile
      description: |-
        This is the user profile page
        It contains the user information and the photos uploaded by the user
      type: object
      properties:
        id:
          description: User id
          type: integer
          example: 1
        username: { $ref: "#/components/schemas/Username" }
        photos: { $ref: "#/components/schemas/Photos" }
        numberOfPhotos:
          description: Photos count
          type: integer
          example: 2
        numberOfFollowers:
          description: Followers count
          type: integer
          example: 340
        numberOfFollowing:
          description: Followers count
          type: integer
          example: 400
    Image:
      type: string
      format: binary
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        owner:
          { $ref: "#/components/schemas/Username" }
        content:
          type: string
          example: "Nice photo!"
        createdAt:
          type: string
          format: date-time
paths:
  /session:
    post:
      tags: [ "profile" ]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        201:
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 1

  /update-profile-username:
    put:
      tags: [ "profile" ]
      summary: Update the username
      description: |
        If the token in the header is valid, the username is updated
        with the new one provided in the body.
        If the username is not valid, the response is 400 Bad Request.
        If the token in the header is not valid, the response is 401 Unauthorized.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success
                    example: Modifica avvenuta con successo
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
      security:
        - bearerAuth: [ ]

  /profile-page/{username}:
    parameters:
      - { $ref: "#/components/parameters/Username" }
    get:
      tags: [ "profile" ]
      summary: Get the user profile page
      description: |-
        Get the user profile page with the list of photos uploaded by the user and the user information.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If the token in the header corresponds to a user in the list of banned user of the user profile page,
        the response is 403 Forbidden.
        If the user does not exist, the response is 404 Not Found.
      operationId: getUserProfile
      responses:
        200:
          description: User profile page
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/UserProfilePage" }
        401: { $ref: '#/components/responses/UnauthorizedError' }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
  /search/{string}:
    parameters:
      - in: path
        name: string
        schema:
          type: string
          example: "Fede"
        required: true
        description: String to match with the username
    get:
      tags: [ "profile" ]
      summary: Get the list of all users with the username matching the string
      description: |-
        Get the list of all users that have the string passed in the path in their username, ignoring case.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If the string is empty or don't match, the response is 404 Not Found.
      operationId: getUsersList
      responses:
        200:
          description: User profile list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401: { $ref: '#/components/responses/UnauthorizedError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
  /photos/:
    get:
      tags: [ "photos interactions" ]
      summary: Returns the photos of the followed users
      description: |-
        Return the personal photos stream of the user specified in the authorization header.
        The photos are returned in reverse chronological order, and they are based on the
        following relationships.
        If the token in the header is not valid, the response is 401 Unauthorized.
      operationId: getMyStream
      responses:
        200:
          description: User photos stream
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
        401: { $ref: "#/components/responses/UnauthorizedError" }
      security:
        - bearerAuth: [ ]
    post:
      tags: [ "photos interactions" ]
      summary: Post a photo
      description: |-
        Post a photo to the server, and the photo is added to the user profile page.
        The user must be logged in. If the user is not logged in, the response is 401 Unauthorized.
        If the file is not an image, the response is 400 Bad Request.
      operationId: uploadPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image: { $ref: "#/components/schemas/Image" }
      responses:
        201: { $ref: '#/components/responses/CreatedMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
      security:
        - bearerAuth: [ ]

  /photos/{photoId}/:
    parameters:
      - { $ref: "#/components/parameters/PhotoId" }
    delete:
      tags: [ "photos interactions" ]
      summary: Delete the photo
      description: |-
        Delete the photo passed in the path only if the user is 
        the owner of the photo, checking the token in the header.
        If the user is not the owner of the photo, the response is 401 Unauthorized.
        If the photo does not exist, the response is 404 Not Found.
      operationId: deletePhoto
      responses:
        204: { $ref: '#/components/responses/NoContentMessage' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]

  /follow/{username}:
    parameters:
      - { $ref: "#/components/parameters/Username" }
    post:
      tags: [ "social" ]
      summary: Follow an user
      description: |-
        Follow the user with the id specified by the user in the authorization header.
        It will be added to the list of followed users of the user in the authorization header.
        If the user is already followed, the response is 400 Bad Request.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If the user tries to follow himself, the response is 403 Forbidden.
        If the user does not exist, the response is 404 Not Found.
      operationId: followUser
      responses:
        201: { $ref: '#/components/responses/CreatedMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
    delete:
      tags: [ "social" ]
      summary: Unfollow a user
      description: |-
        Remove the follow relationship between the user with the username specified in the 
        path and the user in the authorization header. 
        If the user is not followed, the response is 400 Bad Request.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If you try to unfollow yourself, the response is 403 Forbidden.
        If the user does not exist, the response is 404 Not Found.
      operationId: unfollowUser
      responses:
        204: { $ref: '#/components/responses/NoContentMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
  /ban/{username}:
    post:
      parameters:
        - { $ref: "#/components/parameters/Username" }
      tags: [ "social" ]
      summary: Ban an user
      description: |-
        Ban the user specified for the user with the id specified
        by the user in the authorization header. 
        It will be added to the list of banned users of the user in the authorization header.
        If the user is already banned, the response is 400 Bad Request.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If the user tries to ban himself, the response is 403 Forbidden.
        If the user does not exist, the response is 404 Not Found.
      operationId: banUser
      responses:
        201: { $ref: '#/components/responses/CreatedMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
    delete:
      parameters:
        - { $ref: "#/components/parameters/Username" }
      tags: [ "social" ]
      summary: Remove a ban
      description: |-
        Remove the user passed in the path from the banned
        list of the user with the authorization header.
        If the user is not banned, the response is 400 Bad Request.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If you try to unban yourself, the response is 403 Forbidden.
        If the user does not exist, the response is 404 Not Found.
      operationId: unbanUser
      responses:
        204: { $ref: '#/components/responses/NoContentMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]

  /photos/{photoId}/likes:
    parameters:
      - { $ref: "#/components/parameters/PhotoId" }
    post:
      tags: [ "photos interactions" ]
      summary: Add a like to a photo
      description: |-
        Add a like to the photo passed in the path, from the user specified in the authorization header.
        If the user has already liked the photo, the response is 400 Bad Request.
        The user must be logged in. If the user is not logged in, the response is 401 Unauthorized.
        If the photo does not exist, the response is 404 Not Found.
      operationId: likePhoto
      responses:
        201: { $ref: '#/components/responses/CreatedMessage' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: '#/components/responses/NotFoundError' }
        400: { $ref: '#/components/responses/BadRequestError' }
      security:
        - bearerAuth: [ ]
    delete:
      tags: [ "photos interactions" ]
      summary: Remove the like from the photo
      description: |-
        Removes the like from the photo passed in the path, from the user specified in the authorization header.
        If the user has not liked the photo, the response is 400 Bad Request.
        The user must be logged in. If the user is not logged in, the response is 401 Unauthorized.
        If the photo does not exist, the response is 404 Not Found.
      operationId: unlikePhoto
      responses:
        204: { $ref: '#/components/responses/NoContentMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
  /photos/{photoId}/comments:
    parameters:
      - { $ref: "#/components/parameters/PhotoId" }
    get:
      tags: [ "photos interactions" ]
      summary: Returns the comments of a photo
      description: |-
        Return the comments of the photo passed in the path.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If the request user is banned from the owner of the photo, the response is 403 Forbidden.
        If the photo does not exist, the response is 404 Not Found.
      operationId: getPhotoComments
      responses:
        200:
          description: List of Comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
    post:
      tags: [ "photos interactions" ]
      summary: Create a comment for a photo
      description: |-
        Post a comment for the photo passed in the path,
        from the user specified in the authorization header.
        The user must be logged in.
        If the comment is bad formatted, the response is 400 Bad Request.
        If the user is not logged in, returns 401 Unauthorized.
        If the request user is banned from the owner of the photo, the response is 403 Forbidden.
        If the photo does not exist, returns 404 Not Found.
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
              { $ref: "#/components/schemas/Comment" }
      responses:
        201: { $ref: '#/components/responses/CreatedMessage' }
        400: { $ref: '#/components/responses/BadRequestError' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]

  /comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/CommentId"
    get:
      tags: [ "comments" ]
      summary: Returns a comment
      description: |-
        Return the comment passed in the path.
        There is no need to be logged in to see the comment.
        If the token in the header is not valid, the response is 401 Unauthorized.
        If the request user is banned from the owner of the comment, the response is 403 Forbidden.
        If the comment does not exist, returns 404 Not Found.
      operationId: getComment
      responses:
        200:
          description: Comment retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]

    delete:
      tags: [ "comments" ]
      summary: Delete a comment
      description: |-
        Delete the comment passed in the path only if the user in the authorization header
        is the author of the comment.
        The user must be logged in.
        If the user is not logged in, returns 401 Unauthorized.
        If the user is not the author of the comment, returns 403 Forbidden.
        If the comment does not exist, returns 404 Not Found.
      operationId: uncommentPhoto
      responses:
        204: { $ref: '#/components/responses/NoContentMessage' }
        401: { $ref: "#/components/responses/UnauthorizedError" }
        403: { $ref: '#/components/responses/ForbiddenError' }
        404: { $ref: '#/components/responses/NotFoundError' }
      security:
        - bearerAuth: [ ]
